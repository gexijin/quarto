---
title: "Polishing Documents"
subtitle: "From R Markdown to Quarto </br> rstudio::conf 2022"
author: "Andrew Bray"
format: qmdrslides-revealjs
---

## Getting Exercise 

To get the materials for each part of this course packed in an RStudio Project, run:

````{.markdown style="font-size: 1.5em"}
```{{r}}
usethis::use_course("rmd-to-quarto/polishing-documents")
```
````

> You can also `git clone` if you prefer that workflow.


# Generic Blocks and Inlines

## What happens when you pandoc it? {auto-animate="true"}

From the last exercise . . .

``` bash
quarto pandoc -f html -t markdown ex-2-goal.html -o ex-2-answer.md
```

. . .

::: columns
::: {.column width="60%"}
![](images/pandoc-convert-1.png)
:::

::: {.column width="40%"}
\
\

This looks familiar!
:::
:::

## What happens when you pandoc it? {auto-animate="true"}

From the last exercise . . .

``` bash
quarto pandoc -f html -t markdown ex-2-goal.html -o ex-2-answer.md
```

::: columns
::: {.column width="60%"}
![](images/pandoc-convert-2.png)

![](images/pandoc-convert-1.png)
:::

::: {.column width="40%"}
\
\

This looks familiar!

\

|             . . . but this does not.
:::
:::


## The Bracketed Span {transition="none"}

![](images/quarto-workshop-07.jpg){fig-align="center"}

## The Bracketed Span {transition="none"}

![](images/quarto-workshop-08.jpg){fig-align="center"}

## The Bracketed Span {transition="none"}

![](images/quarto-workshop-09.jpg){fig-align="center"}

## The Bracketed Span {transition="none"}

![](images/quarto-workshop-10.jpg){fig-align="center"}

## The Bracketed Span {transition="none"}

![](images/quarto-workshop-11.jpg){fig-align="center"}

## The Fenced Div {transition="none"}

![](images/quarto-workshop-12.jpg){fig-align="center"}

# Quarto Elements

## {menu-title="Disclaimers"}

:::{.columns align=center}
:::{.column width=20%}
:::
:::{.column .incremental width=60%}
\

### What you're about to see . . .

- Most of the elements work across the main output formats (html, pdf, docx, pptx)
- Many of the attributes work across multiple element types
- Most of this is new Quarto functionality. Some of it is original Pandoc.
- This is a subset of the elements available. See the Quarto Guide for the full list.
:::
:::{.column width=20%}
:::
:::

## Callout Blocks {auto-animate=true}

Highlight content for the reader in multiple formats.

::: columns
::: {.column width="50%"}
#### Markdown

``` markdown
:::{.callout-note}
Look - a squirrel!
:::

:::{.callout-important}
Look - a squirrel!
:::

:::{.callout-tip}
Look - a squirrel!
:::
```
:::

::: {.column .fragment width="50%"}
#### HTML output

::: callout-note
Look - a squirrel!
:::

::: callout-important
Look - a squirrel!
:::

::: callout-tip
Look - a squirrel!
:::
:::
:::

## Callout Blocks {auto-animate=true}

Highlight content for the reader in multiple formats.

::: columns
::: {.column width="50%"}
#### Markdown

``` markdown
:::{.callout-note}
Look - a squirrel!
:::

:::{.callout-important}
Look - a squirrel!
:::

:::{.callout-tip}
Look - a squirrel!
:::
```
:::

::: {.column width="50%"}
#### PDF output

![](images/callouts-pdf.png)
:::
:::

## Callout Blocks {auto-animate=true}

Highlight content for the reader in multiple formats.

::: columns
::: {.column width="50%"}
#### Markdown

``` markdown
:::{.callout-note}
Look - a squirrel!
:::

:::{.callout-important}
Look - a squirrel!
:::

:::{.callout-tip}
Look - a squirrel!
:::
```
:::

::: {.column width="50%"}
#### DOCX output

![](images/callouts-doc.png)
:::

\
\
:::

## Element Layouts

Quarto makes available several layout *attributes* that apply to broad range of block elements.

-   `layout-ncol`: split elements across n columns (`2`, `3`, ...).
-   `layout-nrow`: split elements across n rows (`2`, `3`, ...).
-   `layout-valign`: align elements (`top`, `center`, `bottom`, `default`).
-   `layout`: Split elements into a 2D array by rows and columns[^1].

[^1]: For more control, see `{.grid}` which relies up the CSS Bootstrap Grid system. See the \[Guide\]{https://quarto.org/docs/output-formats/page-layout.html#article}.

## Element Layouts {auto-animate="true"}

`layout-ncol`

::: columns
::: {.column width="50%"}
#### Markdown

``` markdown
:::{layout-ncol=2}
A novelty clock, watch, and the like for 
keeping time at an animal's rate, defined
in terms of a multiple of human rate by 
dividing the average lifetime of a 
particular animal into the average 
lifetime of a human being. The multiple
for dogs is seven, for example.

![](images/dog-watch.png)
:::
```
:::

::: {.column .border width="50%"}
#### HTML output

::: {layout-ncol="2" style="border: 2px solid #5c5859"}
[A clock for keeping time at an animal's rate. The multiple for dogs is seven, for example.]{style="font-size: .5em"}

![](images/dog-watch.png)
:::
:::
:::

## Element Layouts {auto-animate="true"}

`layout-ncol` + `layout-valign`

::: columns
::: {.column width="50%"}
#### Markdown

``` {.markdown code-line-numbers="1"}
:::{layout-ncol=2 layout-valign=middle}
A novelty clock, watch, and the like for 
keeping time at an animal's rate, defined
in terms of a multiple of human rate by 
dividing the average lifetime of a 
particular animal into the average 
lifetime of a human being. The multiple
for dogs is seven, for example.

![](images/dog-watch.png)
:::
```
:::

::: {.column .border width="50%"}
#### HTML output

::: {layout-ncol="2" layout-valign="center" style="border: 2px solid #5c5859"}
[A clock for keeping time at an animal's rate. The multiple for dogs is seven, for example.]{style="font-size: .5em"}

![](images/dog-watch.png)
:::
:::
:::

## Element Layouts {auto-animate="true"}

`layout-ncol` with small image

::: columns
::: {.column width="50%"}
#### Markdown

``` {.markdown code-line-numbers="10"}
:::{layout-ncol=2}
A novelty clock, watch, and the like for 
keeping time at an animal's rate, defined
in terms of a multiple of human rate by 
dividing the average lifetime of a 
particular animal into the average 
lifetime of a human being. The multiple
for dogs is seven, for example.

![](images/dog-watch-small.png)
:::
```
:::

::: {.column .border width="50%"}
#### HTML output

::: {layout-ncol="2" layout-valign="center" style="border: 2px solid #5c5859"}
[A clock for keeping time at an animal's rate. The multiple for dogs is seven, for example.]{style="font-size: .5em"}

![](images/dog-watch.png){width="130px"}
:::
:::
:::

<!-- ## Element Layouts {auto-animate="true"} -->

<!-- `layout-ncol` + `layout-align` ZZQ -->

<!-- ::: columns -->
<!-- ::: {.column width="50%"} -->
<!-- #### Markdown -->

<!-- ``` {.markdown code-line-numbers="1"} -->
<!-- :::{layout-ncol=2 layout-align=right} -->
<!-- A novelty clock, watch, and the like for  -->
<!-- keeping time at an animal's rate, defined -->
<!-- in terms of a multiple of human rate by  -->
<!-- dividing the average lifetime of a  -->
<!-- particular animal into the average  -->
<!-- lifetime of a human being. The multiple -->
<!-- for dogs is seven, for example. -->

<!-- ![](images/dog-watch-small.png) -->
<!-- ::: -->
<!-- ``` -->
<!-- ::: -->

<!-- ::: {.column .border width="50%"} -->
<!-- #### HTML output -->

<!-- ::: {layout-ncol="2" layout-align="right" style="border: 2px solid #5c5859"} -->
<!-- [A clock for keeping time at an animal's rate. The multiple for dogs is seven, for example.]{style="font-size: .5em"} -->

<!-- ![](images/dog-watch.png){width="130px"} -->
<!-- ::: -->
<!-- ::: -->
<!-- ::: -->

## Element Layout Array

`layout`: The layout attribute[^2] is a 2-dimensional array where the first dimension defines rows and the second columns.

[^2]: For more control with HTML output, see `{.grid}` which relies up the CSS Bootstrap Grid system. See the \[Guide\]{https://quarto.org/docs/output-formats/page-layout.html#article}.

\

-   `layout="[[1,1], [1]]"` translates to: *create two rows, the first of which has two columns of equal size and the second of which has a single column*.
-   You can scale the relative dimension of each panel by changing the `1`s.

## Element Layout Array {auto-animate="true"}

::: columns
::: {.column width="50%"}
#### Markdown

``` {.markdown code-line-numbers="1"}
:::{layout="[[1,1], [1]]"}
![](images/watch-face.png)

![](images/dog-watch.png)

![](images/circuit.png)
:::
```
:::

::: {.column .border .fragment width="50%"}
#### HTML output

::: {layout="[[1,1], [1]]" style="border: 2px solid #5c5859"}
![](images/watch-face.png){style="border: 2px solid #5c5859" width="250px"}

![](images/dog-watch.png){style="border: 2px solid #5c5859" width="250px"}

![](images/circuit.png){style="border: 2px solid #5c5859" width="750px"}
:::
:::
:::

::: {.fragment style="position: absolute; top: 420px; left: 0px"}
[What would `layout="[[1,5], [1]]"` do?]{style="font-size: .8em"}
:::

## Element Layout Array {auto-animate="true"}

::: columns
::: {.column width="50%"}
#### Markdown

``` {.markdown code-line-numbers="1"}
:::{layout="[[1,5], [1]]"}
![](images/watch-face.png)

![](images/dog-watch.png)

![](images/circuit.png)
:::
```
:::

::: {.column .border width="50%"}
#### HTML output

::: {layout="[[1,5], [1]]" style="border: 2px solid #5c5859"}
![](images/watch-face.png){style="border: 2px solid #5c5859" width="250px"}

![](images/dog-watch.png){style="border: 2px solid #5c5859" width="250px"}

![](images/circuit.png){style="border: 2px solid #5c5859" width="750px"}
:::
:::
:::


## Document Layout: column classes

Modify the width of the main body column for individual block elements (e.g. paragraph, figures).

. . .

::: columns
::: {.column width="50%"}
#### Markdown

``` {.markdown code-line-numbers="1,11"}
:::{.column-body}
A novelty clock, watch, and the like for 
keeping time at an animal's rate, defined
in terms of a multiple of human rate by 
dividing the average lifetime of a 
particular animal into the average 
lifetime of a human being. The multiple
for dogs is seven, for example.
:::

:::{.column-screen}
A novelty clock, watch, and the like for 
keeping time at an animal's rate, defined
in terms of a multiple of human rate by 
dividing the average lifetime of a 
particular animal into the average 
lifetime of a human being. The multiple
for dogs is seven, for example.
:::
```
:::

::: {.column .fragment width="50%"}
#### HTML output

![](images/doc-layout.png){fig-align="center"}
:::
:::

## Document Layout: column classes

Modify the width of the main body column for individual block elements (e.g. paragraph, figures).

. . .

::: columns
::: {.column width="50%"}
#### Markdown

``` {.markdown code-line-numbers="1,11"}
:::{.column-body}
A novelty clock, watch, and the like for 
keeping time at an animal's rate, defined
in terms of a multiple of human rate by 
dividing the average lifetime of a 
particular animal into the average 
lifetime of a human being. The multiple
for dogs is seven, for example.
:::

:::{.column-screen}
A novelty clock, watch, and the like for 
keeping time at an animal's rate, defined
in terms of a multiple of human rate by 
dividing the average lifetime of a 
particular animal into the average 
lifetime of a human being. The multiple
for dogs is seven, for example.
:::
```
:::

::: {.column .fragment width="50%"}
#### HTML output

![](images/doc-layout.png){fig-align="center"}
:::
:::

## Document Layout: margin classes {auto-animate="true"}

Place any inline or block element from the body to the margin.

. . .

::: columns
::: {.column width="50%"}
#### Markdown

``` markdown
![](images/dog-watch.png)

What a brilliant idea.
```
:::

::: {.column width="50%"}
#### Output

![](images/margin-no.png){style="border: 2px solid #5c5859"}
:::
:::

## Document Layout: margin classes {auto-animate="true"}

Place any inline or block element from the body to the margin.

::: columns
::: {.column width="50%"}
#### Markdown

``` {.markdown code-line-numbers="3"}
![](images/dog-watch.png)

:::{.column-margin}
What a brilliant idea.
:::
```
:::

::: {.column width="50%"}
#### Output

![](images/margin-yes.png){style="border: 2px solid #5c5859"}
:::
:::

## Poll 

:::poll
What is your preferred method of adding a figure to an Rmd so that it displays in HTML at 300 pixels wide?
:::

[A. markdown]{.smallcaps}
```{.markdown}
![A nice image.](foo/bar.png){width=300}
```

[B. html]{.smallcaps}
```{.html}
<img src="foo/bar.png" width="300">
```

[C: knitr]{.smallcaps}
````
```{{r, out.width="300px"}}
knitr::includegraphics("foo/bar.png")
```
````

## {menu-title="Results"}

<center>
<iframe src="https://embed.polleverywhere.com/multiple_choice_polls/VAc75oeVhE1nNsL8E0jA8?controls=none&short_poll=true" width="800px" height="600px"></iframe>
</center>

## Figures

[Quarto expands the functionality of markdown. Set `width`, `height`, `fig-align`, add link, caption, and alt-text.]{style="font-size: .8em"}

``` markdown
![A caption](images/dog-watch.png){width=300 fig-align=right fig-alt="Dog watching a watch."}
```

. . .

![A caption](images/dog-watch.png){width=300 fig-align=right fig-alt="Dog watching a watch."}

. . .

::: {style="font-size: .8em"}
-   Units default to `px`.
-   Other choices `300in`, `300%` (relative to image size), `3em` (relative to font size).
-   Entire fig can be nested inside the link syntax (`[fig](url)`) to link the image
:::

## Labels for Links

In additional to external resources, links can go to elements of the same doc through its `#id`.

. . .

::: columns
::: {.column width="50%"}
#### Markdown

``` markdown
![A caption](images/dog-watch.png){#dogwatch}

< Much more text >

A novelty clock, [watch](#dogwatch), and the
like for keeping time at an animal's rate . . .
```
:::

::: {.column .fragment width="50%"}
#### HTML output

::: {style="border: 2px solid #5c5859"}
![A caption](images/dog-watch.png){#dogwatch width="300"}

::: {style="font-size: .7em"}
\< Much more text \>

A novelty clock, [watch](#dogwatch), and the like for keeping time at an animal's rate . . .
:::
:::
:::
:::

::: {.fragment style="position: absolute; top: 590px; left: 80px; font-size: .8em"}
-   Works for many elements,\
    not just figs!
:::

## Labels for References

References can be made dynamic using `#<type>-id` and `@<type>-id`.

. . .

::: columns
::: {.column width="50%"}
#### Markdown

``` {.markdown code-line-numbers="1,5"}
![Caption](images/dog-watch.png){#fig-dogwatch}

< Much more text >

A novelty clock, watch (@fig-dogwatch), and the like for 
keeping time at an animal's rate . . .
```
::: 

::: {.column .fragment width="50%"}
#### HTML output

::: {style="border: 2px solid #5c5859"}
![A caption](images/dog-watch.png){#fig-dogwatch width="300"}

::: {style="font-size: .7em"}
\< Much more text \>

A novelty clock, watch (@fig-dogwatch), and the like for keeping time at an animal's rate . . .
:::
:::
:::
:::

::: {.fragment style="position: absolute; top: 530px; left: 75px; font-size: .8em"}
-   Unlike a link, a reference changes \
    with the ordering of the element\
    as well as its type.
-   Other `<type>` include `@tbl-`,\
    `@sec-`, `@eq-`, `@thm-`, and many\
    more for math.
:::

## Customized References

You can customize the appearance of inline references by either changing the syntax of the inline reference or by setting options.

| Type          | Syntax                | Output   |
|---------------|-----------------------|----------|
| Default       | `@fig-elephant`       | Figure 1 |
| Custom Prefix | `[Fig @fig-elephant]` | Fig 1    |
| No Prefix     | `[-@fig-elephant]`    | 1        |

# Rstudio and Quarto

##  {menu-title="Using the Visual Editor"}

::: v-center-container
[Let's play around in the RStudio Visual Editor!]{style="text-align: center"}
:::

## Easy Table Generation

Have the editor write the markdown for you!

![](images/visual-table.png){fig-alt="Screenshot of inserting a table via the Visual Editor." fig-align=center}

## Catalog of Elements

Type `/` on a new line to search the element types.

![](images/visual-elements.png){fig-alt="Screenshot of the pop-up after typing /." fig-align=center}

## Reminder of Attributes

Click `...` next to elements to see the attributes you can change.

![](images/visual-attributes.png){fig-alt="Screenshot highlighting the three dots along the right side of the editor." fig-align=center}

## YAML Intelligence

`Ctrl + space` to see all available options then tab-complete. Also works in VSCode.


![](images/yaml-intelligence.png){fig-alt="Screenshot highlighting the three dots along the right side of the editor." fig-align=center}

# {{< fa umbrella-beach >}} Exercise 3 {background-color="#00403d"}

Open `ex-3.qmd` and follow the directions to create a document that describes your favorite place to visit on vacation.

\

When you're done, please share a screenshot of your document in the GitHub Discussion thread "Exercise 3".

# Addressing Appearance with Themes

## 

:::{.v-center-container}
| I'll show you three webpages briefly.
|
|
|
|
|
|                     What do you think they're for?
|                     Who do you think is their audience?
:::

## 

<iframe src="http://www.csszengarden.com/221/" width="1600px" height="900px"></iframe>

## 

<iframe src="http://www.csszengarden.com/215/" width="1600px" height="900px"></iframe>

## 

<iframe src="http://www.csszengarden.com/213/" width="1600px" height="900px"></iframe>

##

:::{.v-center-container}
| I'll show you three webpages briefly.
|
|
|
|
|
|                     What do you think they're for?
|                     Who do you think is their audience?
:::



## What Defines a Document?

A document consists of *content*, *structure*, *appearance*, *format*.

::: columns
:::{.column width="50%" .fragment .fade-right}
![](images/rubiks-patent.png)
:::

::: {.column width="50%" .fragment}
\

- **Content:** text, code, graphics
- **Structure:** paragraphs, lists, emphasis, etc.
- **Appearance:** fonts, colors, layout
- **Format:** functionality

:::
:::

## The Power of CSS

\

:::{layout="[[1,3.5,1]]"}

\

*A demonstration of what can be accomplished through CSS-based design. Select any style sheet from the list to load it into this page.*

\
\

:::

![](images/zen-1.png){width=30%} ![](images/zen-2.png){width=30%} ![](images/zen-3.png){width=30%}


## HTML Themes

A collection of CSS rules that define font, colors, and spacing is called a *theme*. Quarto has 25 pre-loaded themes from Bootswatch.

![](images/bootswatch.png){fig-alt="screenshot of a collection of bootswatch themes.}

::: footer
<https://bootswatch.com/>
:::


# {{< fa umbrella-beach >}} Exercise 3 Redux {background-color="#00403d"}

Add a Bootswatch theme to your `ex-3.qmd` by adding the following to your YAML.

```{.markdown}
---
format:
  html:
    theme: <theme>
---
```

You can find the list of theme names at [Quarto Guide >> Documents >> HTML](https://quarto.org/docs/output-formats/html-themes.html).

\

Try out several of the themes (or view them at <https://bootswatch.com/>) then apply your favorite and share a screenshot of the styled document in the GitHub Discussion thread "Exercise 3".

# Baby Steps into CSS

## HTML attributes

HTML, like markdown, has a set of elements that structure a website: `<div>`, `<body>`, `<pre>`, `<span>`, etc. Compare:

::::columns
:::{.column width=33%}
#### Markdown

```{.markdown}
A [Span Element]{}.
```
:::
:::{.column width=37%}
#### HTML Code

```{.html}
<p>A <span>Span Element</span>.</p>
```
:::
:::{.column width=30%}
#### HTML Output

A [Span Element]{}.
:::
:::

. . . 

we can add labels.

::::columns
:::{.column width=33%}
#### Markdown

```{.markdown}
A [Span Element]{#label}.
```
:::
:::{.column width=37%}
#### HTML Code

```{.html}
<p>A <span id="label">Span Element</span>.</p>
```
:::
:::{.column width=30%}
#### HTML Output

A [Span Element]{#label}.
:::
:::

. . .

\
\

|              . . . still looks the same. Let's add some style.


## Adding Style

#### Markdown

````{.markdown style="font-size: 1.3em"}
A [Span Element]{#label style="color: red"}.
````

. . .

\

#### HTML

```{.html style="font-size: 1.3em"}
<p>A <span id="label" style="color: red">Span Element</span>.</p>
```

. . .

\

#### HTML Output

A [Span Element]{#label style="color: red"}.

## Quick Exercise {background-color="#00403d"}

#### CSS Properties

There are many many many CSS properties available for styling.

<https://www.w3schools.com/cssref/>

Take a moment and add a few more different style properties from the list to a test span in your sandbox.

Syntax: `style="property-1: value; property-2: value"`


## DRY for style

If you have a [style]{style="font-size: 1.5em; text-decoration: underline"} that you want to apply [multiple times]{style="font-size: 1.5em; text-decoration: underline"}, it makes sense to encapsulate it in a CSS rule. Why?

. . .

#### Source

`If you have a [style]{style="font-size: 1.5em; text-decoration: underline"} that you want to apply [multiple times]{style="font-size: 1.5em; text-decoration: underline"}, it makes sense to encapsulate it in a CSS rule. Why?`

. . .

\

|           [Don't Repeat Yourself]{.meta-el} (DRY): repetitive code is hard to update... and long!

## CSS Rule syntax {auto-animate=true}

To write a rule for a class.

```{.css style="font-size: 1.5em"}
.class {
  property-1: value;
  property-2: value;
}
```

. . .

Contrast with the inline style approach:

```{.markdown style="font-size: 1.5em"}
style="property-1: value; property-2: value"
```

. . .

To make the rule accessible to your document, put it into a separate `styles.css` file and link to in the YAML.

````{.yaml}
---
title: "CSS Demo"
format:
  html:
    css: styles.css
---
````

## CSS Rule syntax {auto-animate=true}

To write a rule for a class.

```{.css style="font-size: 1.5em"}
.loud {
  font-size: 1.5em;
  text-decoration: underline;
}
```

. . .

\

`If you have a [style]{.loud} that you want to apply [multiple times]{.loud}, it makes sense to encapsulate it in a CSS rule. Why?`

# {{< fa palette >}} Exercise 4 {background-color="#00403d"}

There are three CSS challenges in this exercise

1. Write the rules that style [Inline Elements]{.inline-el}, [Block Elements]{.block-el}, and [Metadata Elements]{.meta-el} in these slides.
2. Create your own rudimentary callout box.

# {{< fa clone >}} Stickies {background-color="#00403d"}

On your way out the door for lunch, please write on the blue sticky note one that confused or frustrated you and on the yellow sticky something that you enjoyed, or got your excited.

## References and further reading {.smaller}

- [Quarto Guide for Authoring](https://quarto.org/docs/authoring/figures.html): format-agnostic treatment of figures, layouts, callouts and many more Quarto elements.
-   [Client Side Web Developent Ch. 5-7](https://info340.github.io/css.html): approachable and concise introduction to how CSS work.
-   [Clock for keeping time at a rate other than human time](https://patents.google.com/patent/US5023850A/en): US patent by Rodney Metts and Barry Thomas


<!-- -   https://patents.google.com/patent/US3811677A/en?q=stilts&oq=stilts -->
<!-- -   https://patents.google.com/patent/US6688257B2/en?q=pet+dog&oq=pet+dog -->
